generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String           @id @default(cuid())
  externalId           String           @unique
  first_name           String?
  last_name            String?
  email                String           @unique
  phone                String?          @unique
  address              String?
  dni                  String?          @unique
  password             String?
  image_url            String?
  cbu                  String?          @unique
  cuit                 String?          @unique
  city                 String?
  province             String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  roleId               Int
  role                 Role             @default(USER)
  notificationId       String?
  birthDate            DateTime?
  emailAddressId       String?
  mpId                 Int?
  mpCode               Json?
  serviceRequests      ServiceRequest[]
  categories           Category[]
  comentsmade          Comment[]        @relation("comentAuthor")
  comentsRecieved      Comment[]        @relation("comentUser")
  reviewsMade          Review[]         @relation("author")
  reviewsRecieved      Review[]         @relation("solucionador")
  notificationRecieved Notification[]   @relation("notificado")
  notificationCreated  Notification[]   @relation("notificador")
  budgetsRecieved      Budget[]
  budgetsMade          Budget[]         @relation("solucionador")
  notificationsReaded  Notification[]   @relation("readBy")
  cityId               String?
  City                 City?            @relation("cityId", fields: [cityId], references: [id])

  provinceId String?

  Province Province? @relation("provinceId", fields: [provinceId], references: [id])

  @@unique([externalId, mpId])
  @@index([roleId], map: "roleId")
  @@index([provinceId], map: "provinceId")
  @@index([cityId], map: "cityId")
}

model City {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users          User[]           @relation("cityId")
  ServiceRequest ServiceRequest[] @relation("serivceRequestId")
  Service        Service[]        @relation("serviceCityId")
  provinceId     String
  Province       Province         @relation("cityProvinceId", fields: [provinceId], references: [id])

  @@index([provinceId])
  @@index([name], map: "name")
}

model Province {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users          User[]           @relation("provinceId")
  Citys          City[]           @relation("cityProvinceId")
  ServiceRequest ServiceRequest[] @relation("serviceRequestProvinceId")
  Service        Service[]        @relation("serviceProvinceId")

  @@index([name], map: "name")
}

model Review {
  id        String   @id @default(cuid())
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Decimal
  authorId  String
  userId    String
  serviceId String   @unique
  service   Service  @relation(fields: [serviceId], references: [id])
  user      User     @relation("solucionador", fields: [userId], references: [externalId])
  author    User     @relation("author", fields: [authorId], references: [externalId])

  @@index([authorId])
  @@index([serviceId])
  @@index([userId])
}

model Notification {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  authorId         String
  title            String
  content          String
  link             String?
  read             Boolean         @default(false)
  serviceRequestId String?
  serviceId        String?
  bugdetId         String?
  author           User            @relation("notificador", fields: [authorId], references: [externalId], onDelete: Cascade)
  users            User[]          @relation("notificado")
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  service          Service?        @relation(fields: [serviceId], references: [id])
  readBy           User[]          @relation("readBy")
  budget           Budget[]

  @@index([serviceRequestId])
  @@index([serviceId])
  @@index([authorId])
}

model ServiceRequest {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  categoryId    Int
  status        Status         @default(PENDING)
  details       Json?
  address       String?
  amount        String?
  date          DateTime?
  description   String?
  province      String?
  schedule      String?
  urgency       String?        @default("No")
  user          User           @relation(fields: [userId], references: [externalId])
  category      Category       @relation(fields: [categoryId], references: [id])
  bugdets       Budget[]
  coments       Comment[]
  notifications Notification[]
  cityId        String?
  City          City?          @relation("serivceRequestId", fields: [cityId], references: [id])
  proviceId     String?
  Province      Province?      @relation("serviceRequestProvinceId", fields: [proviceId], references: [id])
  provinceId    String?
  photos        PhotoMeta[]    @relation("serviceRequestPhoto")
  portraitId    String?        @unique
  portrait      PhotoMeta?     @relation("serviceRequestPortrait", fields: [portraitId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([cityId])
  @@index([proviceId])
  @@index([categoryId])
  @@index([userId])
}

model PhotoMeta {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  url              String
  serviceRequestId String
  ServiceRequest   ServiceRequest @relation("serviceRequestPhoto", fields: [serviceRequestId], references: [id])

  serviceRequestPortraitId String?         @unique
  serviceRequestPortrait   ServiceRequest? @relation("serviceRequestPortrait")

  @@index([serviceRequestId])
  @@index([serviceRequestPortraitId])
}

model Budget {
  id               String         @id @default(cuid())
  description      String
  price            Int
  status           Status         @default(PENDING)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           String
  authorId         String
  estimatedAt      DateTime
  status_detail    String?
  paidAt           DateTime?
  serviceRequestId String
  user             User           @relation(fields: [userId], references: [externalId])
  author           User           @relation("solucionador", fields: [authorId], references: [externalId])
  service          Service?
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  Notification     Notification[]

  @@index([serviceRequestId])
  @@index([userId])
  @@index([authorId])
}

model Service {
  id            String         @id @default(cuid())
  name          String
  description   String
  status        Status         @default(PENDING)
  paymentStatus paymentStatus?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  categoryId    Int
  cityId        String?
  City          City?          @relation("serviceCityId", fields: [cityId], references: [id])
  provinceId    String?
  Province      Province?      @relation("serviceProvinceId", fields: [provinceId], references: [id])
  budgetId      String         @unique
  category      Category       @relation(fields: [categoryId], references: [id])
  budget        Budget         @relation(fields: [budgetId], references: [id])
  review        Review?
  notifications Notification[]
  comments      Comment[]

  @@index([cityId])
  @@index([provinceId])
  @@index([categoryId])
  @@index([budgetId])
}

enum paymentStatus {
  ACREDITADO
  ENVIADO
  PENDIENTE
  RECHAZADO
}

model Comment {
  id               String          @id @default(cuid())
  content          String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  userId           String?
  authorId         String
  serviceRequestId String?
  serviceId        String?
  user             User?           @relation("comentUser", fields: [userId], references: [externalId])
  author           User            @relation("comentAuthor", fields: [authorId], references: [externalId])
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  service          Service?        @relation(fields: [serviceId], references: [id])

  @@index([serviceId])
  @@index([serviceRequestId])
  @@index([userId])
  @@index([authorId])
}

model Category {
  id              Int              @id @default(autoincrement())
  name            String
  slug            String           @unique
  description     String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  image_url       String?
  serviceRequests ServiceRequest[]
  users           User[]
  services        Service[]

  @@index([name], map: "name")
  @@index([slug], map: "slug")
}

model BudgetToNotification {
  A String
  B String

  @@unique([A, B], map: "_BudgetToNotification_AB_unique")
  @@index([B], map: "_BudgetToNotification_B_index")
  @@map("_BudgetToNotification")
}

model CategoryToUser {
  A Int
  B String

  @@unique([A, B], map: "_CategoryToUser_AB_unique")
  @@index([B], map: "_CategoryToUser_B_index")
  @@map("_CategoryToUser")
}

model notificado {
  A String
  B String

  @@unique([A, B], map: "_notificado_AB_unique")
  @@index([B], map: "_notificado_B_index")
  @@map("_notificado")
}

model readBy {
  A String
  B String

  @@unique([A, B], map: "_readBy_AB_unique")
  @@index([B], map: "_readBy_B_index")
  @@map("_readBy")
}

enum Status {
  PENDING
  ACEPTED
  REJECTED
  FINISHED
}

enum Role {
  USER
  SOLUCIONADOR
  ADMIN
}
