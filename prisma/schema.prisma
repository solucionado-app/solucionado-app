// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id                   String           @id @default(cuid())
    externalId           String           @unique
    first_name           String?
    last_name            String?
    email                String           @unique
    phone                String?          @unique
    address              String?
    dni                  String?          @unique
    password             String?
    image_url            String?
    cbu                  String?
    cuit                 String?
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @updatedAt
    serviceRequests      ServiceRequest[]
    categories           Category[]
    roleId               Int
    role                 Role             @default(USER)
    comentsmade          Comment[]        @relation("comentAuthor")
    comentsRecieved      Comment[]        @relation("comentUser")
    reviewsMade          Review[]         @relation("author")
    reviewsRecieved      Review[]         @relation("solucionador")
    notificationRecieved Notification[]   @relation("notificado")
    notificationCreated  Notification[]   @relation("notificador")
    notificationId       String?
    budgetsRecieved      Budget[]
    budgetsMade          Budget[]         @relation("solucionador")
    notificationsReaded  Notification[]   @relation("readBy")

    @@index([roleId], name: "roleId")
}

model Notification {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    authorId         String
    author           User            @relation("notificador", fields: [authorId], references: [externalId])
    users            User[]          @relation("notificado")
    title            String
    content          String
    link             String?
    read             Boolean         @default(false)
    serviceRequestId String?
    serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
    serviceId        String?
    service          Service?        @relation(fields: [serviceId], references: [id])
    readBy           User[]          @relation("readBy")

    @@index([serviceRequestId])
    @@index([serviceId])
    @@index([authorId])
}

model ServiceRequest {
    id            String         @id @default(cuid())
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    userId        String
    user          User           @relation(fields: [userId], references: [externalId])
    categoryId    Int
    category      Category       @relation(fields: [categoryId], references: [id])
    status        Status         @default(PENDING)
    description   String?
    date          DateTime?
    address       String?
    province      String?
    city          String?
    urgency       String?        @default("No")
    amount        String?
    schedule      String?
    details       Json?
    bugdets       Budget[]
    coments       Comment[]
    notifications Notification[]

    @@index([categoryId])
    @@index([userId])
}

model Budget {
    id          String    @id @default(cuid())
    description String
    price       Int
    status      Status    @default(PENDING)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    userId      String
    user        User      @relation(fields: [userId], references: [externalId])
    authorId    String
    author      User      @relation("solucionador", fields: [authorId], references: [externalId])
    estimatedAt DateTime
    paidAt      DateTime?
    service     Service?

    serviceRequestId String
    serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])

    @@index([serviceRequestId])
    @@index([userId])
    @@index([authorId])
}

enum Status {
    PENDING
    ACEPTED
    REJECTED
    FINISHED
}

model Service {
    id            String         @id @default(cuid())
    name          String
    description   String
    status        Status         @default(PENDING)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    categoryId    Int
    category      Category       @relation(fields: [categoryId], references: [id])
    budgetId      String         @unique
    budget        Budget         @relation(fields: [budgetId], references: [id])
    review        Review?
    notifications Notification[]
    comments      Comment[]

    @@index([categoryId])
    @@index([budgetId])
}

model Review {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    rating    Decimal
    authorId  String
    userId    String

    serviceId String  @unique
    service   Service @relation(fields: [serviceId], references: [id])
    user      User    @relation("solucionador", fields: [userId], references: [externalId])
    author    User    @relation("author", fields: [authorId], references: [externalId])

    @@index([authorId])
    @@index([serviceId])
    @@index([userId])
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    user      User     @relation("comentUser", fields: [userId], references: [externalId])
    authorId  String
    author    User     @relation("comentAuthor", fields: [authorId], references: [externalId])

    serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
    serviceRequestId String?
    serviceId        String?
    service          Service?        @relation(fields: [serviceId], references: [id])

    @@index([serviceId])
    @@index([serviceRequestId])
    @@index([userId])
    @@index([authorId])
}

enum Role {
    CLIENT
    USER
    SOLUCIONADOR
    ADMIN
}

model Category {
    id              Int              @id @default(autoincrement())
    name            String
    slug            String           @unique
    description     String
    image_url       String?
    serviceRequests ServiceRequest[]
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    users           User[]
    services        Service[]

    @@index([name], name: "name")
    @@index([slug], name: "slug")
}
