/* eslint-disable @typescript-eslint/no-misused-promises */
import { type SignedInAuthObject } from "@clerk/nextjs/server";
import {
  type GetStaticPropsContext,
  type GetStaticPaths,
  type InferGetStaticPropsType,
} from "next";
import { ssgHelper } from "~/server/api/ssgHelper";
import { type JwtPayload, type ServerGetTokenOptions } from "@clerk/types";
import Head from "next/head";
import { type MyPage } from "~/components/types/types";
import { Button } from "~/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "~/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "~/components/ui/tabs";

import { api } from "~/utils/api";
import ServiceComents from "~/components/comments/ServiceComents";

import CommentServiceForm from "~/components/comments/CommentServiceForm";

import dynamic from "next/dynamic";
import { Textarea } from "~/components/ui/textarea";
import { ReviewServiceForm } from "~/components/reviews/ReviewServiceForm";

const ServicePage: MyPage<InferGetStaticPropsType<typeof getStaticProps>> = ({
  id,
}) => {
  const request = api.service.findById.useQuery({ id });
  const { data: service } = request;

  return (
    <>
      <Head>
        <title>Contacto</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container flex flex-col items-center justify-center gap-8 px-4 py-16 ">
        <div className="relative border p-5  text-xl font-semibold  shadow-sm">
          <h1 className="text-4xl font-extrabold tracking-tight">
            Informaci칩n de el servicio
          </h1>
          <div className="flex flex-col gap-2">
            <div className="font-bold">{service?.category.name}</div>
            <div className="text-sm text-gray-500">{service?.description}</div>
          </div>
        </div>
        <Tabs defaultValue="info" className="w-full p-5">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="info">Informaci칩n del Servicio</TabsTrigger>
            <TabsTrigger value="comments">Comentarios</TabsTrigger>
          </TabsList>
          <TabsContent value="info">
            <Card>
              <CardHeader>
                <CardTitle>Presupuestos</CardTitle>
                <CardDescription>Informaci칩n</CardDescription>
              </CardHeader>
              <CardContent className="space-y-2 py-2">
                {service?.status === "FINISHED" && (
                  <div className="space-y-1">
                    {/* <DynamicMercadoPago /> */}
                    <ReviewServiceForm />
                  </div>
                )}
              </CardContent>
              <CardFooter></CardFooter>
            </Card>
          </TabsContent>
          <TabsContent value="comments">
            <Card>
              <CardHeader>
                <CardTitle>Comentarios</CardTitle>
                <CardDescription>aca van los comentarios</CardDescription>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="space-y-1">
                  <CommentServiceForm
                    service={service}
                    serviceId={id}
                    categoryName={service?.category.name}
                  />
                  <ServiceComents serviceId={id} />
                </div>
              </CardContent>
              <CardFooter>
                <Button>Ver m치s</Button>
              </CardFooter>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </>
  );
};

export default ServicePage;
ServicePage.Layout = "Main";

export const getStaticPaths: GetStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export async function getStaticProps(
  context: GetStaticPropsContext<{ id: string }>
) {
  const id = context?.params?.id;

  if (id == null) {
    return {
      redirect: {
        destination: "/404",
      },
    };
  }
  const auth: SignedInAuthObject = {
    sessionId: "123",
    session: undefined,
    actor: undefined,
    userId: "123",
    user: undefined,
    orgId: undefined,
    orgRole: undefined,
    orgSlug: undefined,
    sessionClaims: {} as JwtPayload,
    organization: undefined,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getToken: function (
      options?: ServerGetTokenOptions | undefined
    ): Promise<string | null> {
      throw new Error("Function not implemented.");
    },
    debug: function (): unknown {
      throw new Error("Function not implemented.");
    },
  };
  const ssg = ssgHelper(auth);
  await ssg.service.findById.prefetch({ id });
  return {
    props: {
      trpcState: ssg.dehydrate(),
      id,
    },
  };
}
