/* eslint-disable @typescript-eslint/no-misused-promises */
import { type SignedInAuthObject } from "@clerk/nextjs/server";
import { type GetStaticPropsContext, type GetStaticPaths, type InferGetStaticPropsType, } from "next";
import { ssgHelper } from "~/server/api/ssgHelper";
import { type JwtPayload, type ServerGetTokenOptions } from "@clerk/types";
import Head from "next/head";
import { type MyPage } from "~/components/types/types";
import { Button } from "~/components/ui/button"
import {
    Card,
    CardContent,
    CardDescription,
    CardFooter,
    CardHeader,
    CardTitle,
} from "~/components/ui/card"
import {
    Tabs,
    TabsContent,
    TabsList,
    TabsTrigger,
} from "~/components/ui/tabs"

import { api } from "~/utils/api";
import { useUser } from "@clerk/nextjs";
import BudgetsForm from "~/components/budgets/BudgetsForm";
import CommentsForm from "~/components/comments/CommentForm";
import CommentsServiceRequest from "~/components/comments/CommentsServiceRequest";

import dynamic from "next/dynamic";


const budgetTableDynamic = () => dynamic(() => import(`~/components/budgets/BugetsTable`), {
    loading: () => <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900"></div>,
})

const CategoryPage: MyPage<InferGetStaticPropsType<typeof getStaticProps>> = ({ id }) => {

    const { user } = useUser()
    const request = api.serviceRequest.findById.useQuery({ id })
    const { data: serviceRequest } = request

    const DynamicBudgetTable = budgetTableDynamic()


    const { data: budgets, isLoading: budgetsIsLoading } = api.budget.getAll.useQuery({ serviceRequestId: id })

    const { data: budgetListSolucionador } = api.budget.findByRequestId.useQuery({ serviceRequestId: id }, {
        enabled: Boolean(user && user?.id !== serviceRequest?.userId),
    })
    const rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;
    return (
        <>
            <Head>
                <title>Contacto</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className="container flex flex-col items-center justify-center gap-8 px-4 py-16 ">

                <div className="text-xl font-semibold border  shadow-sm relative  p-5">
                    <h1 className="text-4xl font-extrabold tracking-tight">Informacion de Solicitud</h1>
                    {serviceRequest?.details && Object.keys(serviceRequest?.details).map((key: string, i) => (

                        <p key={i}>
                            <span> {key.replace(rex, '$1$4 $2$3$5')}</span>
                            <span> {serviceRequest?.details && serviceRequest?.details[key as keyof typeof serviceRequest.details]}</span>
                        </p>
                    ))}
                </div>
                <Tabs defaultValue="account" className="w-full p-5">
                    <TabsList className="grid w-full grid-cols-2">
                        <TabsTrigger value="account">Presupuestos</TabsTrigger>
                        <TabsTrigger value="password">Comentarios</TabsTrigger>
                    </TabsList>
                    <TabsContent value="account">
                        <Card>
                            <CardHeader>
                                <CardTitle>Presupuestos</CardTitle>
                                <CardDescription>
                                    aca van los presupuestos
                                </CardDescription>
                            </CardHeader>
                            <CardContent className="space-y-2">
                                <div className="space-y-1">
                                    {/* <Budgets /> */}
                                    {
                                        budgetListSolucionador && <DynamicBudgetTable budgets={budgetListSolucionador} />
                                    }
                                    {user?.id !== serviceRequest?.userId && <BudgetsForm serviceRequest={serviceRequest} serviceRequestId={id} />}

                                    {user?.id === serviceRequest?.userId && !budgetsIsLoading && budgets && <DynamicBudgetTable budgets={budgets} />}
                                </div>
                            </CardContent>
                            <CardFooter>
                                {/* <Button>ver mas</Button> */}
                            </CardFooter>
                        </Card>
                    </TabsContent>
                    <TabsContent value="password">
                        <Card>
                            <CardHeader>
                                <CardTitle>Comentarios</CardTitle>
                                <CardDescription>
                                    aca van los comentarios
                                </CardDescription>
                            </CardHeader>
                            <CardContent className="space-y-2">
                                <div className="space-y-1">
                                    <CommentsForm serviceRequest={serviceRequest} serviceRequestId={id} />
                                    <CommentsServiceRequest serviceRequestId={id} />
                                </div>
                            </CardContent>
                            <CardFooter>
                                <Button>ver mas</Button>
                            </CardFooter>
                        </Card>
                    </TabsContent>
                </Tabs>
            </div>

        </>
    );
}

export default CategoryPage;
CategoryPage.Layout = "Main";

export const getStaticPaths: GetStaticPaths = () => {
    return {
        paths: [],
        fallback: "blocking",
    };
};

export async function getStaticProps(
    context: GetStaticPropsContext<{ id: string }>
) {
    const id = context?.params?.id;

    if (id == null) {
        return {
            redirect: {
                destination: "/404",
            },
        };
    }
    const auth: SignedInAuthObject = {
        sessionId: '123',
        session: undefined,
        actor: undefined,
        userId: '123',
        user: undefined,
        orgId: undefined,
        orgRole: undefined,
        orgSlug: undefined,
        sessionClaims: {} as JwtPayload,
        organization: undefined,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        getToken: function (options?: ServerGetTokenOptions | undefined): Promise<string | null> {
            throw new Error("Function not implemented.");
        },
        debug: function (): unknown {
            throw new Error("Function not implemented.");
        }
    }
    const ssg = ssgHelper(auth);
    await ssg.serviceRequest.findById.prefetch({ id });
    await ssg.comment.getNumberOfComments.prefetch({ serviceRequestId: id });
    return {
        props: {
            trpcState: ssg.dehydrate(),
            id,
        },
    };
}

