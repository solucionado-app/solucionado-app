/* eslint-disable @typescript-eslint/no-misused-promises */
import { type SignedInAuthObject } from "@clerk/nextjs/server";
import { type GetStaticPropsContext, type GetStaticPaths, type InferGetStaticPropsType, } from "next";
import { ssgHelper } from "~/server/api/ssgHelper";
import { type JwtPayload, type ServerGetTokenOptions } from "@clerk/types";
import Head from "next/head";
import { type MyPage } from "~/components/types/types";




import es from 'date-fns/locale/es';
import { format } from "date-fns"
import { api } from "~/utils/api";
import { useUser } from "@clerk/nextjs";
import BudgetsForm from "~/components/budgets/BudgetsForm";
import CommentsForm from "~/components/comments/CommentForm";
import CommentsServiceRequest from "~/components/comments/CommentsServiceRequest";

const locale = es;



const CategoryPage: MyPage<InferGetStaticPropsType<typeof getStaticProps>> = ({ id }) => {

    const { user } = useUser()
    const request = api.serviceRequest.findById.useQuery({ id })
    const { data: serviceRequest } = request


    const { data: budgets, isLoading: budgetsIsLoading } = api.budget.getAll.useQuery({ serviceRequestId: id })


    const { data: budgetListSolucionador } = api.budget.findByRequestId.useQuery({ serviceRequestId: id }, {
        enabled: Boolean(user && user?.id !== serviceRequest?.userId),
    })
    console.log(budgetListSolucionador)
    const rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;
    return (
        <>
            <Head>
                <title>Contacto</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className="container flex flex-col items-center justify-center gap-8 px-4 py-16 ">

                <div className="text-xl font-semibold border  shadow-sm relative  p-5">
                    <h1 className="text-4xl font-extrabold tracking-tight">Informacion de Solicitud</h1>
                    {serviceRequest?.details && Object.keys(serviceRequest?.details).map((key: string, i) => (

                        <p key={i}>
                            <span> {key.replace(rex, '$1$4 $2$3$5')}</span>
                            <span> {serviceRequest?.details && serviceRequest?.details[key as keyof typeof serviceRequest.details]}</span>
                        </p>
                    ))}
                </div>

                <CommentsForm serviceRequest={serviceRequest} serviceRequestId={id} />
                <CommentsServiceRequest serviceRequestId={id} />
                {
                    budgetListSolucionador && budgetListSolucionador.map((budget, i) => (
                        <div key={i} className="text-xl font-semibold border  shadow-sm relative  p-5">
                            <h1 className="text-4xl font-extrabold tracking-tight">Tus Presupuestos</h1>
                            <p>{budget?.price}</p>
                            <p>{budget?.description}</p>
                            <p>{format(budget?.estimatedAt, "PPP", { locale })}</p>
                            <p>{budget?.serviceRequestId}</p>
                            <p>{budget?.userId}</p>
                            <p>{budget?.id}</p>
                        </div>
                    ))
                }
                <BudgetsForm
                    serviceRequest={serviceRequest} serviceRequestId={id} />

                {user?.id !== serviceRequest?.userId && <>
                </>}
                {user?.id === serviceRequest?.userId && <div className="text-xl font-semibold border  shadow-sm relative p-5 m-5">
                    <h1 className="text-4xl font-extrabold tracking-tight">Presupuestos</h1>

                    {budgetsIsLoading && <p>Cargando...</p>}
                    {!budgetsIsLoading && budgets?.length === 0 && <p>Aun no hay presupuestos</p>}
                    {budgets && budgets.map((budget, i) => (
                        <div key={i} className="border-t my-3 p-2">
                            <p>{budget.price}</p>
                            <p>{budget.description}</p>
                            <p>{format(budget.estimatedAt, "PPP", { locale })}</p>
                            <p>{budget.serviceRequestId}</p>
                            <p>{budget.userId}</p>
                            <p>{budget.id}</p>
                        </div>
                    ))}

                </div>}
            </div>

        </>
    );
}

export default CategoryPage;
CategoryPage.Layout = "Main";

export const getStaticPaths: GetStaticPaths = () => {
    return {
        paths: [],
        fallback: "blocking",
    };
};

export async function getStaticProps(
    context: GetStaticPropsContext<{ id: string }>
) {
    const id = context?.params?.id;

    if (id == null) {
        return {
            redirect: {
                destination: "/404",
            },
        };
    }
    const auth: SignedInAuthObject = {
        sessionId: '123',
        session: undefined,
        actor: undefined,
        userId: '123',
        user: undefined,
        orgId: undefined,
        orgRole: undefined,
        orgSlug: undefined,
        sessionClaims: {} as JwtPayload,
        organization: undefined,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        getToken: function (options?: ServerGetTokenOptions | undefined): Promise<string | null> {
            throw new Error("Function not implemented.");
        },
        debug: function (): unknown {
            throw new Error("Function not implemented.");
        }
    }
    const ssg = ssgHelper(auth);
    await ssg.serviceRequest.findById.prefetch({ id });
    await ssg.comment.getNumberOfComments.prefetch({ serviceRequestId: id });
    return {
        props: {
            trpcState: ssg.dehydrate(),
            id,
        },
    };
}

